---
alwaysApply: true
---
# AI Code Generation Rule: Firebase "Blip" Location Chat App Foundation

This rule guides the AI assistant (Cursor) to generate core client-side web application code for a project named "Blip". "Blip" is designed as an open, location-based group chat app, leveraging Firebase services extensively.

## Project Context: "Blip" - A Privacy-Focused Location Chat

"Blip" is a web application where users can join chat rooms based on their *approximate* geographical location (represented by geohashes), without needing to sign up or log in. Privacy is a paramount concern; exact GPS coordinates must never be stored or transmitted to Firebase.

## Key Features to Implement in this Initial Phase:

1.  **Anonymous Authentication:**
    *   Upon first visit or app load, the user should be automatically and silently authenticated as an anonymous Firebase user.
    *   Display the anonymous user's ID somewhere on the UI for debugging/reference.

2.  **Client-Side Location Handling with Geohashing:**
    *   Request the user's *approximate* location using the browser's Geolocation API (`navigator.geolocation`).
    *   **Crucially:** Immediately convert the obtained latitude and longitude into a **geohash string** (e.g., using a suitable JavaScript geohash library or a direct implementation). A geohash precision of around 6 or 7 is suitable for "rough locations."
    *   This geohash is the only location data that will ever be used with Firebase.
    *   Implement error handling for geolocation (e.g., user denies permission, location unavailable).
    *   Provide a placeholder for a "Privacy Toggle" that, when activated, would stop updating the user's location (i.e., stop re-calculating and using new geohashes).

3.  **Firebase SDK Integration:**
    *   Properly initialize Firebase in the JavaScript code using a placeholder for the `firebaseConfig` object.
    *   Import and initialize Firebase Authentication and Cloud Firestore services.

4.  **Basic User Interface (HTML & CSS):**
    *   Create a simple `index.html` structure.
    *   Include a basic header/title for "Blip".
    *   A section to display the current anonymous user ID.
    *   A placeholder for the location privacy toggle.
    *   A section to display the current geohash.
    *   A placeholder section for "Nearby Chat Rooms" (initially empty, just a heading).
    *   A placeholder section for a "Selected Chat Room" (initially empty, just a heading) which will contain:
        *   A message display area.
        *   A text input field for new messages.
        *   A "Send" button.
    *   Minimalist CSS to make the layout clean and readable.

## Generated Code Requirements:

*   **File Structure:** Provide `index.html`, `style.css`, and `script.js` files.
*   **JavaScript:** Use vanilla JavaScript for core logic. Include clear comments explaining each section.
*   **Firebase SDKs:** Ensure the Firebase Auth and Firestore SDKs are correctly imported (via CDN for simplicity in this initial setup).
*   **Geohash Library:** Suggest or provide a simple function for geohash conversion if not using a specific library.
*   **Modularity:** Organize JavaScript functions logically (e.g., `initFirebase()`, `handleAnonymousAuth()`, `getAndGeohashLocation()`, `updateUI()`).

## Important AI Directives:

*   **Security:** Emphasize that sensitive operations (like message auto-deletion) will be handled by Cloud Functions, and robust Firestore Security Rules will be critical for an open app. This prompt focuses on client-side setup.
*   **Placeholders:** Use clear placeholders for `firebaseConfig` details.
*   **Client-Side Focus:** The generated code should strictly be for the client-side web application. Do not generate Cloud Functions code at this stage.

---
**[End Prompt - Copy up to here]**
